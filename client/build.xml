<?xml version="1.0" encoding="UTF-8"?>
<project name="androdyne" default="help">

  <!-- The local.properties file is created and updated by the 'android' tool.
       It contains the path to the SDK. It should *NOT* be checked in in Version
       Control Systems. -->
  <property file="local.properties" />

  <!-- The build.properties file can be created by you and the place to change
       some of the default property values used by the Ant rules.
       Here are some properties you may want to change/update:

       source.dir
           the name of the source directory. Default is 'src'.
       out.dir
           the name of the output directory. Default is 'bin'.

       This file is an integral part of the build system for your application and
       should be checked in in Version Control Systems.

       -->
  <property file="build.properties" />

  <!-- Custom Android task to deal with the project target, and import the proper rules.
       This requires ant 1.6.0 or above. -->
  <path id="android.antlibs">
      <pathelement path="${sdk-location}/tools/lib/anttasks.jar" />
      <pathelement path="${sdk-location}/tools/lib/sdklib.jar" />
      <pathelement path="${sdk-location}/tools/lib/androidprefs.jar" />
      <pathelement path="${sdk-location}/tools/lib/apkbuilder.jar" />
      <pathelement path="${sdk-location}/tools/lib/jarutils.jar" />
  </path>

  <path id="android.target.classpath">
    <fileset dir="${sdk.dir}" includes="**/*.jar"/>
  </path>


  <!-- Properties - copied from Android 2.1 build rules, so should feel
       familiar -->

  <!-- Buld directory -->
  <property name="build.dir" value="build" />
  <property name="build.absolute.dir" location="${build.dir}" />

  <!-- Install dir -->
  <property name="install.absolute.dir" location="${install.dir}" />

  <!-- Input directories -->
  <property name="source.dir" value="src" />
  <property name="source.absolute.dir" location="${source.dir}" />
  <property name="gen.dir" value="gen" />
  <property name="gen.absolute.dir" location="${gen.dir}" />
  <property name="asset.dir" value="assets" />
  <property name="asset.absolute.dir" location="${asset.dir}" />
  <property name="resource.dir" value="res" />
  <property name="resource.absolute.dir" location="${resource.dir}" />

  <!-- Directory for the third party java libraries -->
  <property name="external.libs.dir" value="libs" />
  <property name="external.libs.absolute.dir" location="${external.libs.dir}" />

  <!-- Output directories -->
  <property name="out.dir" value="bin" />
  <property name="out.absolute.dir" location="${out.dir}" />
  <property name="out.classes.dir" value="${out.absolute.dir}/classes" />
  <property name="out.classes.absolute.dir" location="${out.classes.dir}" />

  <!-- Verbosity -->
  <property name="verbose" value="false" />
  <!-- This is needed by emma as it uses multilevel verbosity instead of simple 'true' or 'false'
       The property 'verbosity' is not user configurable and depends exclusively on 'verbose'
       value.-->
  <condition property="verbosity" value="verbose" else="quiet">
      <istrue value="${verbose}" />
  </condition>
  <!-- This is needed to switch verbosity of zipalign and aapt. Depends exclusively on 'verbose'
       -->
  <condition property="v.option" value="-v" else="">
      <istrue value="${verbose}" />
  </condition>
  <!-- This is needed to switch verbosity of dx. Depends exclusively on 'verbose' -->
  <condition property="verbose.option" value="--verbose" else="">
      <istrue value="${verbose}" />
  </condition>

  <!-- Targets -->

  <!-- Creates the output directories if they don't exist yet. -->
  <target name="-dirs">
      <echo>Creating output directories if needed...</echo>
      <mkdir dir="${external.libs.absolute.dir}" />
      <mkdir dir="${gen.absolute.dir}" />
      <mkdir dir="${out.absolute.dir}" />
      <mkdir dir="${out.classes.absolute.dir}" />
  </target>

  <target name="clean" description="Removes output files created by other targets.">
    <delete dir="${out.absolute.dir}" verbose="${verbose}" />
    <delete dir="${gen.absolute.dir}" verbose="${verbose}" />
    <delete dir="${install.absolute.dir}" verbose="${verbose}" />
  </target>

  <!-- Compiles this project's .java files into .class files. -->
  <target name="compile" depends="-dirs"
      description="Compiles project's .java files into .class files"
    >
    <!-- If android rules are used for a test project, its classpath should include
         tested project's location -->
    <condition property="extensible.classpath"
        value="${tested.project.absolute.dir}/bin/classes" else="."
      >
      <isset property="tested.project.absolute.dir" />
    </condition>
    <javac encoding="utf8" target="1.5" debug="true" extdirs=""
        destdir="${out.classes.absolute.dir}"
        bootclasspathref="android.target.classpath"
        verbose="${verbose}" classpath="${extensible.classpath}"
      >
      <compilerarg value="-Xlint" />
      <src path="${source.absolute.dir}" />
      <src path="${gen.absolute.dir}" />
      <classpath>
        <fileset dir="${external.libs.absolute.dir}" includes="*.jar" />
      </classpath>
    </javac>
  </target>

  <!-- Build library .jar file -->
  <target name="build" depends="compile">
    <taskdef name="jarjar"
        classname="com.tonicsystems.jarjar.JarJarTask"
        classpath="${build.absolute.dir}/jarjar-1.0.jar"
      />
    <jarjar destfile="${out.absolute.dir}/${ant.project.name}.jar">
      <fileset dir="${out.classes.absolute.dir}" />
      <zipgroupfileset dir="${external.libs.absolute.dir}" includes="*.jar" />
      <!-- This is annoying... on Android, DexOpt "optimizes" dependencies to
           use system-wide class definitions rather than the ones we really
           want, which makes it hard to rely on newer APIs or bugfixes.
           So we're renaming every class (package) here that we care about. -->
<!--      <rule pattern="org.apache.http.**" result="override.org.apache.http.@1"/>
      <rule pattern="org.apache.james.**" result="override.org.apache.james.@1"/>
      <rule pattern="org.apache.commons.codec.**" result="override.org.apache.commons.codec.@1"/>
      <rule pattern="org.json.**" result="override.org.json.@1" /> -->
    </jarjar>
  </target>

  <target name="install" depends="build">
    <echo>Installing ${ant.project.name}...</echo>

    <mkdir dir="${install.absolute.dir}/libs" />
    <copy todir="${install.absolute.dir}/libs"
          file="${out.absolute.dir}/${ant.project.name}.jar"
          verbose="${verbose}" />

    <mkdir dir="${install.absolute.dir}/res" />
<!--    <copy todir="${install.absolute.dir}/res">
      <fileset dir="${resource.absolute.dir}" />
      <regexpmapper from="^(.*)/([^\.][^/]*\.[^/]*)$$" to="\1/unwesen_\2" />
    </copy> -->
  </target>

  <target name="help">
    <!-- displays starts at col 13
          |13                                                              80| -->
    <echo>Ant Build. Available targets:</echo>
    <echo>   help:      Displays this help.</echo>
    <echo>   clean:     Removes output files created by other targets.</echo>
    <echo>   compile:   Compiles project's .java files into .class files.</echo>
    <echo>   build:     Builds the library .jar file.</echo>
    <echo>   install:   Copy .jar file and resource files to a directory</echo>
    <echo>              structure below ${install.absolute.dir}</echo>
  </target>

</project>
